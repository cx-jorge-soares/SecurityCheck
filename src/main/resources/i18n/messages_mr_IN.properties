EMPTY_LABEL=

# Exception Code Labels
INVALID_END_POINT=खालील {0} end point उपलब्ध नाही. कृपया allEndPoint कॉलमधून endpoint नाव तपासा आणि पुन्हा प्रयत्न करा.
INVALID_LEVEL=खालील {0} level वैध स्तर मूल्य नाही. कृपया supported level आणि endpoint allEndPoint कॉलमधून तपासा आणि पुन्हा प्रयत्न करा.
UNAVAILABLE_LEVEL=खालील {0} level {1} endpoint मध्ये उपलब्ध नाही. कृपया supported level आणि endpoint allEndPoint कॉलमधून तपासा आणि पुन्हा प्रयत्न करा.
INVALID_ACCESS=खालील {0} पद्धत प्रवेशयोग्य नाही. कारणे असू शकतात चुकीची दृश्यता (visibility) किंवा पद्धत व्याख्या (method definition) चुकीची असणे. कृपया लॉग तपासा.
INVALID_AGRUMENTS=खालील {0} पद्धतीसाठी योग्य arguments दिलेले नाहीत. कृपया लॉग तपासा.
SYSTEM_ERROR=सिस्टम त्रुटी आली आहे. कृपया लॉग तपासा.

# XSS based Injections
XSS_VULNERABILITY=Cross-Site Scripting (XSS) हल्ले हे injection प्रकारातील आहेत, ज्यात दुर्भावनायुक्त स्क्रिप्ट्स निर्दोष आणि विश्वसनीय वेबसाइटवर इंजेक्ट केल्या जातात. XSS हल्ला तेव्हा होतो जेव्हा हल्लेखोर वेब अनुप्रयोग वापरून दुर्भावनायुक्त कोड, सामान्यत: ब्राउझर साइड स्क्रिप्टच्या स्वरुपात, दुसर्‍या वापरकर्त्याला पाठवतो. अशा त्रुटी कोठेही होते जिथे वेब अनुप्रयोग वापरकर्त्याचा इनपुट तो तयार करतो अशा आउटपुटमध्ये पडताळणी किंवा एन्कोडिंग न करता वापरतो. &lt;br/&gt; &lt;br/&gt; हल्लेखोर XSS द्वारे दुर्भावनायुक्त स्क्रिप्ट अनपेक्षित वापरकर्त्याला पाठवू शकतो. वापरकर्त्याच्या ब्राउझरला लक्षात येत नाही की स्क्रिप्ट अविश्वसनीय आहे आणि ती स्क्रिप्ट चालू करते. कारण ती स्क्रिप्ट विश्वसनीय स्रोताकडून आली असल्याचा त्याला भास होतो, त्यामुळे ती स्क्रिप्ट कुकीज, सत्र टोकन्स किंवा ब्राउझरमध्ये संग्रहित अन्य संवेदनशील माहिती वापरू शकते. ही स्क्रिप्ट HTML पृष्ठाची सामग्रीही बदलू शकते. &lt;br/&gt;&lt;br/&gt; अधिक माहितीसाठी XSS वर: &lt;ol&gt;&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/xss/" target="_blank"&gt;Owasp XSS&lt;/a&gt;&lt;li&gt;&lt;a href="https://www.google.com/about/appsecurity/learning/xss/" target="_blank"&gt;Google Application Security&lt;/a&gt;&lt;/ol&gt;

#### AttackVector description
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG="comment" क्वेरी पॅरामीटरचे मूल्य थेट "div" टॅगमध्ये जोडले जाते.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG="comment" क्वेरी पॅरामीटरचे मूल्य "<img" आणि "<input" टॅग्स बदलल्यानंतर थेट "div" टॅगमध्ये जोडले जाते.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE="comment" क्वेरी पॅरामीटरचे मूल्य case insensitive "<img" आणि "<input" टॅग्स बदलल्यानंतर थेट "div" टॅगमध्ये जोडले जाते.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_IF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE="comment" क्वेरी पॅरामीटरचे मूल्य null byte आधी "<img" आणि "<input" टॅग्स असल्यास, त्या बदलल्यानंतर थेट "div" टॅगमध्ये जोडले जाते.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVEIF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE="comment" क्वेरी पॅरामीटरचे मूल्य null byte आधी case insensitive "<img" आणि "<input" टॅग्स असल्यास, त्या बदलल्यानंतर थेट "div" टॅगमध्ये जोडले जाते.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING_POST_CONTENT_BEFORE_NULL_BYTE="comment" क्वेरी पॅरामीटरचे मूल्य null byte आधी असलेल्या भागावर HTML escape केल्यानंतर थेट "div" टॅगमध्ये जोडले जाते, उर्वरित भाग जसाचा तसा आहे.

## Image Tag Injections
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY &lt;br/&gt; ही कमकुवतता इमेज टॅगमधील XSS हल्ल्याशी संबंधित आहे. जर ..
#### Attack Vector Description
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL पॅरामीटर्स थेट इमेज टॅगच्या src attribute मध्ये जोडले जातात.
XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=उद्धरण चिह्न URL पॅरामीटर्समध्ये जोडले जातात तेव्हा थेट इमेज टॅगच्या src attribute मध्ये जोडले जातात.
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL पॅरामीटर्सवर HTML escaping केली जाते आणि नंतर थेट इमेज टॅगच्या src attribute मध्ये जोडले जातात.
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG=URL पॅरामीटर्सवर HTML escaping केली जाते आणि कंस [parenthesis] असलेल्या मूल्यांची काढणी केली जाते, नंतर थेट इमेज टॅगच्या src attribute मध्ये जोडले जातात.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL पॅरामीटर्सवर HTML escaping केली जाते आणि उद्धरणे घालून [Quotes] नंतर इमेज टॅगच्या src attribute मध्ये जोडले जातात.
XSS_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG_BUT_NULL_BYTE_VULNERABLE=URL पॅरामीटर्सवर HTML escaping केली जाते, फाइल नावांसाठी whitelist मध्ये पडताळणी केली जाते आणि नंतर इमेज टॅगच्या src attribute मध्ये जोडले जातात, पण filename पडताळणी null byte इंजेक्शनसाठी कमजोर आहे.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL पॅरामीटर्सवर HTML escaping केली जाते, फाइल नावांसाठी whitelist मध्ये पडताळणी केली जाते आणि उद्धरणांत [Quotes] ठेवून नंतर इमेज टॅगच्या src attribute मध्ये जोडले जातात.

## Html Tag Injection
XSS_HTML_TAG_INJECTION=HTML टॅग आधारित XSS हल्ला
XSS_DIRECT_INPUT_DIV_TAG=HTML टॅग थेट div टॅगमध्ये इंजेक्ट केला जातो.

### Attack vectors
XSS_DIRECT_INPUT_DIV_TAG=URL पॅरामीटर्स थेट div टॅगमध्ये जोडले जातात.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=URL पॅरामीटर्स जिथे Script, Image आणि Anchor टॅग नसतील अशा ठिकाणी थेट div टॅगमध्ये जोडले जातात.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD=URL पॅरामीटर्स जिथे Script, Image, Anchor टॅग तसेच Javascript आणि Alert कीवर्ड नसतील अशा ठिकाणी थेट div टॅगमध्ये जोडले जातात.

# URL Redirection
## Location Header Injection
OPEN_REDIRECTION_VULNERABILITY_3XX_BASED=Open redirection कमकुवतता तेव्हा उद्भवतात जेव्हा अनुप्रयोग वापरकर्त्यांनी नियंत्रित केलेला डेटा असुरक्षित रीतीने रिडायरेक्शनच्या ध्येयात समाविष्ट करतो. &lt;br/&gt; हल्लेखोर अनुप्रयोगात URL तयार करू शकतो जो अन्वयार्थाने कोणत्याही बाह्य डोमेनवर रिडायरेक्ट करतो. हा प्रकार वापरकर्त्यांविरुद्ध फिशिंग हल्ले घडविण्यासाठी वापरला जाऊ शकतो. &lt;br/&gt; उपयोगकर्ता वैध URL आणि SSL प्रमाणपत्र असल्यामुळे फिशिंग अधिक विश्वासार्ह वाटते कारण जवळजवळ सर्व वापरकर्ते रिडायरेक्शन केलेला दुसरा डोमेन पाहत नाहीत. &lt;br/&gt;&lt;br/&gt; &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html"&gt;RFC 2616 - "Hypertext Transfer Protocol - HTTP/1.1"&lt;/a&gt; 3xx प्रकारांतील विविध status codes परिभाषित करतो जे ब्राउझरला दिलेल्या पत्त्यावर रिडायरेक्ट करण्यास प्रवृत्त करतात. ही अंमलबजावणी 3xx status codes वर आधारित आहे. &lt;br/&gt;&lt;br/&gt; महत्वाचे दुवे: &lt;ol&gt; &lt;li&gt;&lt;a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank"&gt;WASC-38&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank"&gt;CWE-601&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank"&gt;Port Swigger's vulnerability documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank"&gt;URL पुनर्निर्देशनाचा हेतू स्पष्ट करणारा विकिपीडिया दुवा&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank"&gt;Open Redirection payload list&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank"&gt;डोमेन नाव प्रीफिक्स म्हणून जोडण्याचा अभ्यास&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; काही गैरसमज: &lt;a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank"&gt;URL शॉर्टनर्स open redirects मुळे "vulnerable" आहेत का?&lt;/a&gt;&lt;br/&gt;
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER="returnTo" क्वेरी पॅरामीटरचे मूल्य थेट "Location" हेडरमध्ये जोडले जाते.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_OR_DOMAIN_IS_SAME="returnTo" क्वेरी पॅरामीटरचे मूल्य थेट "Location" हेडरमध्ये जोडले जाते जर ते "http", "www" आणि "https" ने सुरुवात करत नसेल किंवा डोमेन अनुप्रयोगाच्या डोमेनसारखा असेल.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_//_OR_DOMAIN_IS_SAME="returnTo" क्वेरी पॅरामीटरचे मूल्य थेट "Location" हेडरमध्ये जोडले जाते जर ते "http", "www", "https", "//" ने सुरुवात करत नसेल किंवा डोमेन अनुप्रयोगाच्या डोमेनसारखा असेल.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_WWW_HTTPS_//_NULL_BYTE_OR_DOMAIN_IS_SAME="returnTo" क्वेरी पॅरामीटरचे मूल्य थेट "Location" हेडरमध्ये जोडले जाते जर ते "http", "www", "https", "//", किंवा Null Byte ने सुरुवात करत नसेल किंवा डोमेन अनुप्रयोगाच्या डोमेनसारखा असेल.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_//_WWW_%_OR_DOMAIN_IS_SAME="returnTo" क्वेरी पॅरामीटरचे मूल्य थेट "Location" हेडरमध्ये जोडले जाते जर ते "http", "www", "https", "//" आणि ASCII 33 पेक्षा कमी असलेले वर्ण नसतील किंवा डोमेन अनुप्रयोगाच्या डोमेनसारखा असेल.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADDED_TO_LOCATION_HEADER_BY_ADDING_DOMAIN_AS_PREFIX="returnTo" क्वेरी पॅरामीटरचे मूल्य अनुप्रयोग डोमेन प्रीफिक्स जोडून "Location" हेडरमध्ये जोडले जाते.

## Meta Tag based URL Redirection
OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED=Open redirection कमकुवतता जेव्हा अनुप्रयोग वापरकर्त्यांच्या नियंत्रणाखालील डेटा जोखीमयुक्त पद्धतीने रिडायरेक्शनच्या ध्येयात घालतो. &lt;br/&gt; हल्लेखोर अनुप्रयोगात URL तयार करु शकतो जो कोणत्याही बाह्य डोमेनवर रिडायरेक्ट करतो. हा प्रकार फिशिंग हल्ले वाढविण्यास उपयोगी पडतो. &lt;br/&gt; अधिकृत अनुप्रयोग URL आणि वैध SSL प्रमाणपत्र असल्यामुळे वापरकर्ते रिडायरेक्ट लक्षात घेत नाहीत. &lt;br/&gt;&lt;br/&gt; HTML मेटा घटक ब्राउझरला पान ताजे करण्यासाठी सेकंदात वेळ कसा द्यायचा ते सांगतो. वैकल्पिक URI हाताळून हा घटक टाइमर म्हणून URL रिडायरेक्टरसाठी वापरता येतो. &lt;br/&gt; उदा., ब्राउझर 5 सेकंदात example.com वर रिडायरेक्ट होईल: &lt;br/&gt;&lt;meta http-equiv="refresh" content="5;url=http://example.com"&gt; &lt;br/&gt;&lt;br/&gt; महत्वाचे दुवे: &lt;ol&gt; &lt;li&gt;&lt;a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank"&gt;WASC-38&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank"&gt;CWE-601&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank"&gt;Port Swigger's vulnerability documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank"&gt;URL पुनर्निर्देशनाचा हेतू स्पष्ट करणारा विकिपीडिया दुवा&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank"&gt;Open Redirection payload list&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank"&gt;डोमेन प्रीफिक्स जोडण्याचा अभ्यास&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt; काही गैरसमज: &lt;a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank"&gt;URL शॉर्टनर्स open redirects मुळे "vulnerable" आहेत का?&lt;/a&gt;&lt;br/&gt;
URL_REDIRECTION_META_TAG_BASED_INJECTION=मेटा टॅग आधारित URL पुनर्निर्देशन.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=URL पॅरामीटर थेट मेटा टॅगमध्ये जोडलेला आहे.

# UNRESTRICTED_FILE_UPLOAD_VULNERABILITY
UNRESTRICTED_FILE_UPLOAD_VULNERABILITY=अपलोड केलेल्या फाइल्स अनुप्रयोगासाठी महत्वपूर्ण धोका दर्शवितात. अनेक हल्ल्यांतील प्रथम टप्पा म्हणजे हल्ल्याचा कोड सिस्टमवर पोहोचविणे आणि नंतर तो चालवण्याचा मार्ग शोधणे. &lt;br/&gt; अनियंत्रित फाइल अपलोडचे परिणाम विविध असू शकतात, जसे की संपूर्ण सिस्टमवर नियंत्रण मिळणे, फाइल सिस्टम किंवा डेटाबेसमध्ये ओव्हरलोड होणे, बॅकएंड सिस्टमवर हल्ले, क्लायंट साइड हल्ले किंवा फक्त डिफेसमेंट. परिणाम हे फाइलचे कसे वापरले जाते आणि कुठे संग्रहित केले जाते यावर अवलंबून असतो. &lt;br/&gt;&lt;br/&gt; महत्वाचे दुवे: &lt;br/&gt; &lt;ol&gt; &lt;li&gt; &lt;a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank"&gt;Owasp Wiki Link&lt;/a&gt; &lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=CmF9sEyKZNo" target="_blank"&gt;Ebrahim Hegazy talk on Unrestricted File Uploads&lt;/a&gt; &lt;li&gt; &lt;a href="https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/" target="_blank"&gt;Sans rules to implement secure file uploads&lt;/a&gt; &lt;/ol&gt;
#### Attack Vector Description
UNRESTRICTED_FILE_UPLOAD_UNCONTROLLED_RESOURCE_CONSUMPTION=जास्तीत जास्त अपलोड केलेल्या फाइलचा आकार मर्यादित नाही.
UNRESTRICTED_FILE_UPLOAD_NO_VALIDATION_FILE_NAME=अपलोड केलेल्या फाइलच्या नावावर कोणतीही मान्यता नाही.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_FILE_EXTENSION=.html विस्तारांशिवाय सर्व फाइल एक्सटेंशन्स परवानगी आहेत.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION=.html आणि .htm विस्तारांशिवाय सर्व फाइल एक्सटेंशन्स परवानगी आहेत.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION_CASE_INSENSITIVE=case insensitive .html आणि .htm विस्तारांशिवाय सर्व फाइल एक्सटेंशन्स परवानगी आहेत.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_CONTAINS_.PNG_OR_.JPEG_CASE_INSENSITIVE=फक्त त्या नावाला परवानगी आहे ज्यात case insensitive .jpeg किंवा .png असतात.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE_AND_FILE_NAMES_CONSIDERED_BEFORE_NULL_BYTE=फक्त फाइलचे नाव case insensitive .jpeg किंवा .png ने संपते आणि null byte पूर्वी त्या नावाचा विचार केला जातो अशा फाइलला परवानगी.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE=फक्त फाइलचे नाव case insensitive .jpeg किंवा .png ने संपते अशा नावाला परवानगी.

# XXE Vulnerability
XXE_VULNERABILITY=XML External Entity हल्ला हा XML इनपुट parse करणाऱ्या अनुप्रयोगाविरुद्धचा हल्ला आहे. हा हल्ला तो XML इनपुट जो बाह्य entity ला संदर्भ देतो, तो अशक्तरित्या कॉन्फिग केलेल्या XML parser कडून process केला जातो. हा हल्ला गोपनीय डेटा उघड होऊ शकतो, denial of service, server side request forgery, port scanning, तसेच इतर प्रणालीगत वाईट परिणाम करू शकतो. &lt;br/&gt;&lt;br/&gt; महत्वाचे दुवे: &lt;br/&gt; &lt;ol&gt; &lt;li&gt; &lt;a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing" target="_blank"&gt;Owasp Wiki Link&lt;/a&gt; &lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=DREgLWZqMWg" target="_blank"&gt;HackHappy's video tutorial&lt;/a&gt; &lt;li&gt; &lt;a href="https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9" target="_blank"&gt;Medium article by OneHackMan&lt;/a&gt; &lt;li&gt; &lt;a href="https://portswigger.net/web-security/xxe" target="_blank"&gt;Portswigger XXE documentation&lt;/a&gt; &lt;li&gt; &lt;a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md1" target="_blank"&gt;Owasp Prevention cheat sheet&lt;/a&gt; &lt;/ol&gt;
#### Attack Vector Description
XXE_NO_VALIDATION=विनंतीमध्ये दिलेल्या XML वर कोणतीही जाचक तपासणी नाही.
XXE_DISABLE_GENERAL_ENTITY=Parser सामान्य बाह्य entities process करण्यास अक्षम केला आहे.
XXE_DISABLE_GENERAL_AND_PARAMETER_ENTITY=Parser सामान्य आणि parameter entities process करण्यास अक्षम केला आहे.

# Path Traversal Attack
PATH_TRAVERSAL_VULNERABILITY=डिरेक्टरी ट्रॅव्हर्सल (किंवा पाथ ट्रॅव्हर्सल) हल्ला म्हणजे वापरकर्त्याने दिलेल्या इनपुट फाइल नावांची अपुरी सुरक्षा पडताळणी किंवा स्वच्छता न करून फाईल API मध्ये "parent directory" दर्शविणारी अक्षरे पाठवणे. &lt;br/&gt;&lt;br/&gt; या हल्ल्याचा उद्देश जाणिवापूर्वक प्रभावित अनुप्रयोगाचा वापर करून फाईल सिस्टममध्ये अनधिकार प्रवेश मिळवणे होय. &lt;br/&gt;&lt;br/&gt; महत्वाचे दुवे: &lt;br/&gt; &lt;ol&gt; &lt;li&gt; &lt;a href="https://en.wikipedia.org/wiki/Directory_traversal_attack" target="_blank"&gt;विकिपीडिया दुवा&lt;/a&gt; &lt;li&gt; &lt;a href="https://owasp.org/www-community/attacks/Path_Traversal" target="_blank"&gt;Owasp Wiki Link&lt;/a&gt; &lt;/ol&gt;

#### AttackVector description
PATH_TRAVERSAL_URL_PARAM_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य थेट फाइल वाचण्यासाठी मार्गात जोडले जाते.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य थेट जोडले जाते जर ".." उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य थेट जोडले जाते जर ".." किंवा "%2f" (/ ची URL एन्कोडिंग) उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य थेट जोडले जाते जर "..", "%2f" किंवा "%2F" उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य थेट जोडले जाते जर ".." उपस्थित नसेल, URL एन्कोडिंगसह.

PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_PARENT_DIRECTORY_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते जर "../" उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते जर ".." उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते जर ".." किंवा "%2f" उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते जर "..", "%2f" किंवा "%2F" उपस्थित नसेल.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED="fileName" क्वेरी पॅरामीटर्सचे मूल्य Null Byte आधी थेट जोडले जाते जर ".." उपस्थित नसेल, URL एन्कोडिंगसह.

# Command Injection Attack
COMMAND_INJECTION_VULNERABILITY=कमांड इंजेक्शन हा असा हल्ला आहे ज्यामध्ये हेतू होस्ट ऑपरेटिंग सिस्टमवर arbitrary कमांड्स execute करणे असतो, जो असुरक्षित अनुप्रयोगाद्वारे केला जातो. कमांड इंजेक्शन हल्ले तेव्हा शक्य असतात जेव्हा अनुप्रयोग unsafe user डेटा (फॉर्म, कुकी, HTTP हेडर्स वगैरे) सिस्टीम शेलला देतो. या हल्ल्यात सहसा हल्लेखोराकडून दिलेली ऑपरेटिंग सिस्टमची कमांड्स असुरक्षित अनुप्रयोगाच्या हक्कांनी चालवली जातात. कमांड इंजेक्शन अशक्त इनपुट पडताळणीमुळे होतो. &lt;br/&gt;&lt;br/&gt; महत्त्वाचे दुवे: &lt;ol&gt; &lt;li&gt; &lt;a href="https://cwe.mitre.org/data/definitions/77.html" target="_blank"&gt;CWE-77&lt;/a&gt; &lt;li&gt; &lt;a href="https://owasp.org/www-community/attacks/Command_Injection" target="_blank"&gt;Owasp Wiki Link&lt;/a&gt; &lt;/ol&gt;

#### Attack vectors
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED="ipaddress" क्वेरी पॅरामीटरचे मूल्य थेट execute होते.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT="ipaddress" क्वेरी पॅरामीटरचे मूल्य execute होते जर ";" , "&" किंवा स्पेस त्यात नसतील.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT="ipaddress" क्वेरी पॅरामीटरचे मूल्य execute होते जर ";", "&", "%26", "%3B" किंवा स्पेस त्यात नसतील.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT="ipaddress" क्वेरी पॅरामीटरचे मूल्य execute होते जर ";", "&", "%26", "%3B", "%3b" किंवा स्पेस त्यात नसतील.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT="ipaddress" क्वेरी पॅरामीटरचे मूल्य execute होते जर ";", "&", "%26", "%3B", "%3b", "%7C", "%7c", किंवा स्पेस त्यात नसतील.

# Local File Injection
#URL_BASED_LFI_INJECTION=URL आधारित लोकल फाइल इंजेक्शन हल्ला.
#LFI_URL_PARAM_BASED_DIRECT_INJECTION=URL पॅरामीटर "fileName" थेट include फाइलमध्ये दिला जातो.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=URL पॅरामीटर "fileName" validate करून नंतर include फाइलमध्ये दिला जातो.

# Local File Injection with Null Byte
#URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=Null Byte इंजेक्शनसह URL आधारित लोकल फाइल इंजेक्शन हल्ला.
#LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=जर URL पॅरामीटर "fileName" मध्ये Null Byte असेल तर तो थेट include फाईलमध्ये दिला जातो.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=URL पॅरामीटर "fileName" validate करून नंतर include फाईलमध्ये दिला जातो.

# Remote File Injection
URL_BASED_RFI_INJECTION=URL आधारित रिमोट फाइल इंजेक्शन हल्ला.

# JWT Injection
JWT_INJECTION_VULNERABILITY=JSON Web Token (JWT) हा एक खुला मानक (RFC 7519) आहे जो JSON ऑब्जेक्ट स्वरूपात सुरक्षित माहिती पक्षांमध्ये संकुचित आणि स्वायत्तरीत्या पाठविण्याचा मार्ग निश्चित करतो. हा माहिती डिजिटल स्वरूपात स्वाक्षरी केलेला असतो, ज्यामुळे त्याची पडताळणी करणे आणि विश्वास ठेवणे शक्य होते. JWT च्या अंमलबजावणीमध्ये अनेक त्रुटी येऊ शकतात ज्या authentication किंवा authorization प्रक्रियेवर परिणाम करतात आणि प्रणाली पूर्णपणे kompromised होऊ शकते. &lt;br/&gt;&lt;br/&gt; JWT संदर्भातील महत्त्वाचे दुवे: &lt;ol&gt; &lt;li&gt; &lt;a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank"&gt;विकिपीडिया दुवा&lt;/a&gt; &lt;li&gt; &lt;a href="https://jwt.io/introduction/" target="_blank"&gt;Jwt.io&lt;/a&gt; &lt;/ol&gt; JWT अंमलबजावणीतील निश्चित त्रुटी संदर्भातील महत्त्वाचे दुवे: &lt;ol&gt; &lt;li&gt; &lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06" target="_blank"&gt;JSON Web Token Best Current Practices (IETF दस्तऐवज)&lt;/a&gt; &lt;li&gt; &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html" target="_blank"&gt;JWT अंमलबजावणीत असुरक्षिततेसाठी OWASP चीटशीट&lt;/a&gt; &lt;li&gt; &lt;a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries" target="_blank"&gt;सर्व्हर साइड JWT असुरक्षितता&lt;/a&gt; &lt;/ol&gt;

#### AttackVector description
JWT_URL_EXPOSING_SECURE_INFORMATION=विनंतीमध्ये JWT टोकन असते जे URL मध्ये लीक होते. हे PCI आणि बर्‍याच संघटनांच्या पालन धोरणांचे उल्लंघन करते.
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=कुकी आधारित JWT टोकन आहे पण Secure/HttpOnly flags आणि कुकी प्रिफिक्स नसतात.
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=कुकी आधारित JWT टोकन असून HttpOnly flag असतो पण Secure flag आणि कुकी प्रिफिक्स नसतात.
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=कुकी आधारित JWT टोकन असतो जो कमजोर key ने स्वाक्षरी केलेला असतो.
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=कुकी आधारित JWT टोकन आहे ज्याला Null Byte इंजेक्शनची असुरक्षितता आहे.
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=कुकी आधारित JWT टोकन आहे ज्या None अल्गोरिदम विषयी असुरक्षित आहे.
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=कुकी आधारित JWT टोकन आहे ज्यामध्ये Key confusion असुरक्षितता आहे.
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=कुकी आधारित JWT टोकन आहे ज्याचा validator JWK फील्डवर विश्वास ठेवतो परंतु सार्वजनिक की ट्रस्टस्टोरमध्ये आहे की नाही हे तपासत नाही.
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=कुकी आधारित JWT टोकन आहे ज्याला रिक्त टोकनची (empty token) असुरक्षितता आहे.

# SQL Injection Vulnerability
SQL_INJECTION_VULNERABILITY=SQL इंजेक्शन हल्ला म्हणजे क्लायंटकडून प्राप्त इनपुट मध्ये SQL क्वेरीचा समावेश किंवा इंजेक्शन करणे होय. यशस्वी SQL इंजेक्शन हल्ल्यामध्ये डेटाबेसमधील संवेदनशील माहिती वाचली जाऊ शकते, डेटाबेसवरील डेटा (insert/update/delete) बदलला जाऊ शकतो, डेटाबेसचे प्रशासन चालवले जाऊ शकते (उदा. DBMS बंद करणे), DBMS फाइल सिस्टमवरील फाइलची सामग्री प्राप्त केली जाऊ शकते आणि काही वेळेस ऑपरेटिंग सिस्टमवर आज्ञा दिल्या जाऊ शकतात. SQL इंजेक्शन हल्ला हा इंजेक्शन हल्ल्याचा प्रकार आहे ज्यामध्ये SQL कमांड डेटा-इनपुटमध्ये समाविष्ट करून पूर्व निर्धारित SQL कमांड चालवल्या जातात. &lt;br/&gt; SQL इंजेक्शन संदर्भातील महत्त्वाचे दुवे: &lt;ol&gt; &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank"&gt;विकिपीडिया दुवा&lt;/a&gt; &lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank"&gt;Owasp SQL इंजेक्शन&lt;/a&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WkHkryIoLD0" target="_blank"&gt;Joe McCray यांचा SQL इंजेक्शनवरील बोलणी&lt;/a&gt; &lt;li&gt;&lt;a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/" target="_blank"&gt;SQL इंजेक्शन चीटशीट by Netsparker&lt;/a&gt; &lt;/ol&gt; SQL इंजेक्शन प्रतिबंधक उपायांवर महत्वाचे दुवे: &lt;ol&gt; &lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" target="_blank"&gt;Owasp प्रतिबंधक चीटशीट&lt;/a&gt; &lt;li&gt;&lt;a href="https://www.websec.ca/kb/sql_injection" target="_blank"&gt;SQL इंजेक्शन माहिती केंद्र&lt;/a&gt; &lt;/ol&gt;

#### AttackVector description
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पॅरामीटर थेट SQL क्वेरीशी जोडला जातो ज्यामुळे काही परिस्थितीत अपवाद उद्भवतो आणि अनुप्रयोग डेटा उघड करतो.
ERROR_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पॅरामीटरला "'" या उद्धरणात ठेवले जाते आणि मग तो SQL क्वेरीशी जोडला जातो ज्यामुळे अपवाद उद्भवतात आणि माहिती उघड होते.
ERROR_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पॅरामीटरमधून उद्धरण काढून घेतले जाते आणि मग तो SQL क्वेरीशी उद्धरणात घेऊन जोडला जातो ज्यामुळे माहिती उघड होते.
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_TO_PARAMETERIZED_QUERY=क्वेरी पॅरामीटर थेट SQL क्वेरीशी जोडला जातो आणि नंतर parameterized क्वेरी तयार केली जाते. PreparedStatement योग्य वापरणे महत्त्वाचे आहे.
UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पॅरामीटर थेट क्वेरीशी जोडला जातो त्यामुळे \"Union\" किवर्ड वापरून निकाल एकत्र करून माहिती मिळवू शकतात.
UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पॅरामीटर उद्धरणात घेऊन क्वेरीशी जोडला जातो परिणामी \"Union\" किवर्ड वापरून निकाल एकत्र करून माहिती मिळवू शकतात.
UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पॅरामीटरमधून उद्धरण काढून तो उद्धरणात घेऊन SQL क्वेरीशी जोडला जातो जिससे \"Union\" किवर्ड वापरून निकाल एकत्र करून माहिती मिळते.
BLIND_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पॅरामीटर थेट क्वेरीशी जोडला जातो त्यामुळे क्वेरीमध्ये फेरबदल करू शकतात.
BLIND_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पॅरामीटर उद्धरणात घेऊन SQL क्वेरीशी जोडला जातो, ज्याने क्वेरीमध्ये फेरफार होऊ शकतो.

#### SSRF Vulnerability
SSRF_VULNERABILITY=Server-Side Request Forgery (SSRF) हल्ल्यामध्ये हल्लेखोर सर्व्हरच्या कार्यक्षमता गैरवापर करतो ज्यामुळे अंतर्गत संसाधने वाचू किंवा अपडेट करू शकतो. हल्लेखोर URL बदलू शकतो ज्याला सर्व्हरवर चालणारा कोड वाचू शकतो किंवा डेटा सबमिट करू शकतो, आणि योग्य URL निवडून हल्लेखोर सर्व्हरच्या कॉन्फिगरेशनसारख्या AWS metadata वाचू शकतो, अंतर्गत http चालणाऱ्या डेटाबेसशी कनेक्ट करू शकतो किंवा अनपेक्षित अंतर्गत सेवांना पोस्ट विनंती करू शकतो. &lt;br/&gt; SSRF विषयी महत्वाचे दुवे: &lt;ol&gt; &lt;li&gt; &lt;a href="https://en.wikipedia.org/wiki/Server-side_request_forgery" target="_blank"&gt;विकिपीडिया दुवा&lt;/a&gt; &lt;li&gt; &lt;a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery" target="_blank"&gt;Owasp SSRF&lt;/a&gt; &lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=AsPpxqIlTDU" target="_blank"&gt;Musab Khan यांचा SSRF व्हिडिओ&lt;/a&gt; &lt;/ol&gt;
SSRF_VULNERABILITY_URL_WITHOUT_CHECK=दिलेल्या URL वर कोणतीही पडताळणी नाही.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL=file:// प्रोटोकॉल असलेल्या URL ला परवानगी नाही.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_169.254.169.254=file:// प्रोटोकॉल व internal metadata सर्व्हिससाठी IP 169.254.169.254 चा प्रवेश बंद आहे.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_INTERNAL_METADATA_URL=file:// प्रोटोकॉल व internal metadata सर्व्हिसचा प्रवेश बंद आहे.
SSRF_VULNERABILITY_URL_ONLY_IF_IN_THE_WHITELIST=फक्त whitelist मध्ये असलेल्या URL ना परवानगी आहे.

# JWT Injection Header
HEADER_INJECTION_VULNERABILITY=ही तपासणी कशी JWT हेडर हस्तगत करून सही पडताळणी बदलू शकते हे तपासत आहे. सर्व की (जसे INVALID_END_POINT, XSS_VULNERABILITY, इ.) सारखे ठेवावेत